name,quadrant,ring,isNew,description
Lambdas,Platforms,Adopt,FALSE,"<p>We've seen significant benefits from introducing <a href=""https://martinfowler.com/articles/microservices.html"">microservices</a>, which have allowed teams to scale the delivery of independently deployed and maintained services. Unfortunately, we've also seen many teams create a front-end monolith — a large, entangled browser application that sits on top of the back-end services — largely neutralizing the benefits of microservices. <strong>Micro frontends</strong> have continued to gain in popularity since they were first introduced. We've seen many teams adopt some form of this architecture as a way to manage the complexity of multiple developers and teams contributing to the same user experience. In June of this year, one of the originators of this technique published an <a href=""https://martinfowler.com/articles/micro-frontends.html"">introductory article</a> that serves as a reference for micro frontends. It shows how this style can be implemented using various web programming mechanisms and builds out an example application using <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/react-js"">React.js</a>. We're confident this style will grow in popularity as larger organizations try to decompose UI development across multiple teams.</p>"
Pipelines for infrastructure as code,Tools,Adopt,TRUE,"<p>The use of continuous delivery pipelines to orchestrate the release process for software has become a mainstream concept. CI/CD tools can be used to test server configuration (e.g., Chef cookbooks, Puppet modules, Ansible playbooks), server image building (e.g., <a href=""https://www.thoughtworks.com/radar/tools/packer"">Packer</a>), environment provisioning (e.g., <a href=""https://www.thoughtworks.com/radar/tools/terraform"">Terraform</a>, CloudFormation) and the integration of environments. The use of <strong>pipelines for infrastructure as code</strong> lets you find errors before changes are applied to operational environments — including environments used for development and testing. They also offer a way to ensure that infrastructure tooling is run consistently, using CI/CD agents rather than individual workstations. Our teams have had good results adopting this technique on their projects.</p>"
Run cost as architecture fitness function,languages-and-frameworks,Adopt,TRUE,"<p>Automating the estimation, tracking and projection of cloud infrastructure's run cost is necessary for today's organizations. The cloud providers' savvy pricing models, combined with proliferation of pricing parameters and the dynamic nature of today's architecture, can lead to surprisingly expensive run cost. For example, the price of <a href=""https://www.thoughtworks.com/radar/techniques/serverless-architecture"">serverless</a> based on API calls, event streaming solutions based on traffic or data processing clusters based on running jobs, all have a dynamic nature that changes over time as the architecture evolves. When our teams manage infrastructure on the cloud, implementing <strong>run cost as architecture fitness function</strong> is one of their early activities. This means that our teams can observe the cost of running services against the value delivered; when they see deviations from what was expected or acceptable, they'll discuss whether it's time to evolve the architecture. The observation and calculation of the run cost is implemented as an automated function.</p>"
AKS - Azure Kubernetes Service,Techniques,Trial,TRUE,<p>AKS is Azure's managed Kubernetes service. It is used to run docker containers in a managed environment while automating the container life cycle.</p>
Pulumi,languages-and-frameworks,Trial,TRUE,<p>AKS is Azure's managed Kubernetes service. It is used to run docker containers in a managed environment while automating the container life cycle.</p>
Lambdas,Platforms,Hold,TRUE,<p>AKS is Azure's managed Kubernetes service. It is used to run docker containers in a managed environment while automating the container life cycle.</p>
Python,languages-and-frameworks,Adopt,FALSE,<p>AKS is Azure's managed Kubernetes service. It is used to run docker containers in a managed environment while automating the container life cycle.</p>
Multi-Stage YAML Pipelines,languages-and-frameworks,Adopt,TRUE,<p>AKS is Azure's managed Kubernetes service. It is used to run docker containers in a managed environment while automating the container life cycle.</p>
Azure Pipelines,Platforms,Adopt,FALSE,<p>AKS is Azure's managed Kubernetes service. It is used to run docker containers in a managed environment while automating the container life cycle.</p>
Git,languages-and-frameworks,Adopt,FALSE,<p>AKS is Azure's managed Kubernetes service. It is used to run docker containers in a managed environment while automating the container life cycle.</p>
GitHub,Platforms,Adopt,FALSE,<p>AKS is Azure's managed Kubernetes service. It is used to run docker containers in a managed environment while automating the container life cycle.</p>
Azure Functions,Platforms,Trial,TRUE,<p>AKS is Azure's managed Kubernetes service. It is used to run docker containers in a managed environment while automating the container life cycle.</p>
API Gateway,Platforms,Trial,TRUE,<p>AKS is Azure's managed Kubernetes service. It is used to run docker containers in a managed environment while automating the container life cycle.</p>